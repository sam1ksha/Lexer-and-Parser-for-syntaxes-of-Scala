
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DEF DIV EQUALS IDENTIFIER INT LBRACE LPAREN MINUS MUL PLUS PRINT RBRACE RETURN RPAREN SEMICOLONprogram : functionsfunctions : functions function\n                 | functionfunction : DEF IDENTIFIER LPAREN params RPAREN COLON type EQUALS LBRACE statements RBRACEparams : params COMMA param\n                | param\n                | emptyparam : IDENTIFIER COLON typetype : INT\n                | IDENTIFIERstatements : statements statement\n                  | statementstatement : assignment SEMICOLON\n                  | print_statement SEMICOLON\n                  | return_statement SEMICOLONreturn_statement : RETURN expressionassignment : IDENTIFIER EQUALS expressionexpression : term\n                  | expression signs term\n                  term : IDENTIFIERsigns : PLUS\n                | MINUS\n                | DIV\n                | MULprint_statement : PRINT LPAREN expression RPARENempty :'
    
_lr_action_items = {'DEF':([0,2,3,5,32,],[4,4,-3,-2,-4,]),'$end':([1,2,3,5,32,],[0,-1,-3,-2,-4,]),'IDENTIFIER':([4,7,12,14,18,22,24,25,30,31,33,34,35,36,37,43,44,45,46,47,],[6,8,15,8,15,23,23,-12,40,40,-11,-13,-14,-15,40,40,-21,-22,-23,-24,]),'LPAREN':([6,29,],[7,37,]),'RPAREN':([7,9,10,11,15,16,17,19,39,40,42,49,],[-26,13,-6,-7,-10,-8,-9,-5,-18,-20,48,-19,]),'COMMA':([7,9,10,11,15,16,17,19,],[-26,14,-6,-7,-10,-8,-9,-5,]),'COLON':([8,13,],[12,18,]),'INT':([12,18,],[17,17,]),'EQUALS':([15,17,20,23,],[-10,-9,21,31,]),'LBRACE':([21,],[22,]),'PRINT':([22,24,25,33,34,35,36,],[29,29,-12,-11,-13,-14,-15,]),'RETURN':([22,24,25,33,34,35,36,],[30,30,-12,-11,-13,-14,-15,]),'RBRACE':([24,25,33,34,35,36,],[32,-12,-11,-13,-14,-15,]),'SEMICOLON':([26,27,28,38,39,40,41,48,49,],[34,35,36,-16,-18,-20,-17,-25,-19,]),'PLUS':([38,39,40,41,42,49,],[44,-18,-20,44,44,-19,]),'MINUS':([38,39,40,41,42,49,],[45,-18,-20,45,45,-19,]),'DIV':([38,39,40,41,42,49,],[46,-18,-20,46,46,-19,]),'MUL':([38,39,40,41,42,49,],[47,-18,-20,47,47,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'functions':([0,],[2,]),'function':([0,2,],[3,5,]),'params':([7,],[9,]),'param':([7,14,],[10,19,]),'empty':([7,],[11,]),'type':([12,18,],[16,20,]),'statements':([22,],[24,]),'statement':([22,24,],[25,33,]),'assignment':([22,24,],[26,26,]),'print_statement':([22,24,],[27,27,]),'return_statement':([22,24,],[28,28,]),'expression':([30,31,37,],[38,41,42,]),'term':([30,31,37,43,],[39,39,39,49,]),'signs':([38,41,42,],[43,43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> functions','program',1,'p_program','func.py',64),
  ('functions -> functions function','functions',2,'p_functions','func.py',68),
  ('functions -> function','functions',1,'p_functions','func.py',69),
  ('function -> DEF IDENTIFIER LPAREN params RPAREN COLON type EQUALS LBRACE statements RBRACE','function',11,'p_function','func.py',72),
  ('params -> params COMMA param','params',3,'p_params','func.py',75),
  ('params -> param','params',1,'p_params','func.py',76),
  ('params -> empty','params',1,'p_params','func.py',77),
  ('param -> IDENTIFIER COLON type','param',3,'p_param','func.py',80),
  ('type -> INT','type',1,'p_type','func.py',83),
  ('type -> IDENTIFIER','type',1,'p_type','func.py',84),
  ('statements -> statements statement','statements',2,'p_statements','func.py',88),
  ('statements -> statement','statements',1,'p_statements','func.py',89),
  ('statement -> assignment SEMICOLON','statement',2,'p_statement','func.py',92),
  ('statement -> print_statement SEMICOLON','statement',2,'p_statement','func.py',93),
  ('statement -> return_statement SEMICOLON','statement',2,'p_statement','func.py',94),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','func.py',97),
  ('assignment -> IDENTIFIER EQUALS expression','assignment',3,'p_assignment','func.py',100),
  ('expression -> term','expression',1,'p_expression','func.py',103),
  ('expression -> expression signs term','expression',3,'p_expression','func.py',104),
  ('term -> IDENTIFIER','term',1,'p_term','func.py',108),
  ('signs -> PLUS','signs',1,'p_signs','func.py',111),
  ('signs -> MINUS','signs',1,'p_signs','func.py',112),
  ('signs -> DIV','signs',1,'p_signs','func.py',113),
  ('signs -> MUL','signs',1,'p_signs','func.py',114),
  ('print_statement -> PRINT LPAREN expression RPAREN','print_statement',4,'p_print_statement','func.py',117),
  ('empty -> <empty>','empty',0,'p_empty','func.py',120),
]
